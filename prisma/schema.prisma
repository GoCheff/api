// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../docs/diagrams/entity-relation-diagram.pdf"
  includeRelationFromFields = true
  theme                     = "neutral"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  female
  male
  other
  preferNotToSay
}

model Admin {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  password  String
  gender    Gender    @default(preferNotToSay)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([email, deletedAt])
  @@map("admins")
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  password  String
  gender    Gender    @default(preferNotToSay)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  carts Cart[]

  @@unique([email, deletedAt])
  @@map("customers")
}

enum RegisterStatus {
  pending
  approved
  rejected
}

model Cheff {
  id             Int            @id @default(autoincrement())
  name           String
  email          String
  password       String
  gender         Gender         @default(preferNotToSay)
  mainCuisine    String         @map("main_cuisine")
  city           String
  registerStatus RegisterStatus @default(pending) @map("register_status")
  registerReason String         @map("register_reason")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  deletedAt      DateTime?      @map("deleted_at")

  foodPlates FoodPlate[]

  @@unique([email, deletedAt])
  @@map("cheffs")
}

model FoodPlate {
  id          Int       @id @default(autoincrement())
  cheffId     Int       @map("cheff_id")
  name        String
  description String
  imageUrl    String    @map("image_url")
  price       Float
  minServe    Int       @map("min_serve")
  maxServe    Int       @map("max_serve")
  cookTime    Float     @map("cook_time")
  glutenFree  Boolean   @default(false) @map("gluten_free")
  lactoseFree Boolean   @default(false) @map("lactose_free")
  vegan       Boolean   @default(false)
  vegetarian  Boolean   @default(false)
  light       Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  cheff    Cheff      @relation(fields: [cheffId], references: [id])
  cartItem CartItem[]

  @@map("food_plates")
}

enum CartStatus {
  open
  sent
  approved
  rejected
  paid
  canceled
  delivered
}

model Cart {
  id           Int        @id @default(autoincrement())
  customerId   Int        @map("customer_id")
  status       CartStatus @default(open)
  locale       String
  eventDate    DateTime   @map("event_date")
  phoneContact String     @map("phone_contact")
  observation  String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  deletedAt    DateTime?  @map("deleted_at")

  customer  Customer   @relation(fields: [customerId], references: [id])
  cartItems CartItem[]

  @@unique([customerId, deletedAt])
  @@map("carts")
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cartId      Int       @map("cart_id")
  foodPlateId Int       @map("food_plate_id")
  quantity    Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  foodPlate FoodPlate @relation(fields: [foodPlateId], references: [id])
  cart      Cart      @relation(fields: [cartId], references: [id])

  @@unique([cartId, foodPlateId, deletedAt])
  @@map("cart_items")
}
